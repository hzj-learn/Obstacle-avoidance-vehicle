// Generated by gencpp from file r150_ndt_localizer/PointsDownsamplerInfo.msg
// DO NOT EDIT!


#ifndef R150_NDT_LOCALIZER_MESSAGE_POINTSDOWNSAMPLERINFO_H
#define R150_NDT_LOCALIZER_MESSAGE_POINTSDOWNSAMPLERINFO_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace r150_ndt_localizer
{
template <class ContainerAllocator>
struct PointsDownsamplerInfo_
{
  typedef PointsDownsamplerInfo_<ContainerAllocator> Type;

  PointsDownsamplerInfo_()
    : header()
    , filter_name()
    , measurement_range(0.0)
    , original_points_size(0)
    , filtered_points_size(0)
    , original_ring_size(0)
    , filtered_ring_size(0)
    , exe_time(0.0)  {
    }
  PointsDownsamplerInfo_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , filter_name(_alloc)
    , measurement_range(0.0)
    , original_points_size(0)
    , filtered_points_size(0)
    , original_ring_size(0)
    , filtered_ring_size(0)
    , exe_time(0.0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _filter_name_type;
  _filter_name_type filter_name;

   typedef float _measurement_range_type;
  _measurement_range_type measurement_range;

   typedef int32_t _original_points_size_type;
  _original_points_size_type original_points_size;

   typedef int32_t _filtered_points_size_type;
  _filtered_points_size_type filtered_points_size;

   typedef int32_t _original_ring_size_type;
  _original_ring_size_type original_ring_size;

   typedef int32_t _filtered_ring_size_type;
  _filtered_ring_size_type filtered_ring_size;

   typedef float _exe_time_type;
  _exe_time_type exe_time;





  typedef boost::shared_ptr< ::r150_ndt_localizer::PointsDownsamplerInfo_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::r150_ndt_localizer::PointsDownsamplerInfo_<ContainerAllocator> const> ConstPtr;

}; // struct PointsDownsamplerInfo_

typedef ::r150_ndt_localizer::PointsDownsamplerInfo_<std::allocator<void> > PointsDownsamplerInfo;

typedef boost::shared_ptr< ::r150_ndt_localizer::PointsDownsamplerInfo > PointsDownsamplerInfoPtr;
typedef boost::shared_ptr< ::r150_ndt_localizer::PointsDownsamplerInfo const> PointsDownsamplerInfoConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::r150_ndt_localizer::PointsDownsamplerInfo_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::r150_ndt_localizer::PointsDownsamplerInfo_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::r150_ndt_localizer::PointsDownsamplerInfo_<ContainerAllocator1> & lhs, const ::r150_ndt_localizer::PointsDownsamplerInfo_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.filter_name == rhs.filter_name &&
    lhs.measurement_range == rhs.measurement_range &&
    lhs.original_points_size == rhs.original_points_size &&
    lhs.filtered_points_size == rhs.filtered_points_size &&
    lhs.original_ring_size == rhs.original_ring_size &&
    lhs.filtered_ring_size == rhs.filtered_ring_size &&
    lhs.exe_time == rhs.exe_time;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::r150_ndt_localizer::PointsDownsamplerInfo_<ContainerAllocator1> & lhs, const ::r150_ndt_localizer::PointsDownsamplerInfo_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace r150_ndt_localizer

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::r150_ndt_localizer::PointsDownsamplerInfo_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::r150_ndt_localizer::PointsDownsamplerInfo_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::r150_ndt_localizer::PointsDownsamplerInfo_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::r150_ndt_localizer::PointsDownsamplerInfo_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::r150_ndt_localizer::PointsDownsamplerInfo_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::r150_ndt_localizer::PointsDownsamplerInfo_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::r150_ndt_localizer::PointsDownsamplerInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "a6fc8411fcff551ab66c7910e08a8d14";
  }

  static const char* value(const ::r150_ndt_localizer::PointsDownsamplerInfo_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xa6fc8411fcff551aULL;
  static const uint64_t static_value2 = 0xb66c7910e08a8d14ULL;
};

template<class ContainerAllocator>
struct DataType< ::r150_ndt_localizer::PointsDownsamplerInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "r150_ndt_localizer/PointsDownsamplerInfo";
  }

  static const char* value(const ::r150_ndt_localizer::PointsDownsamplerInfo_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::r150_ndt_localizer::PointsDownsamplerInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"string filter_name\n"
"float32 measurement_range\n"
"int32 original_points_size\n"
"int32 filtered_points_size\n"
"int32 original_ring_size\n"
"int32 filtered_ring_size\n"
"float32 exe_time\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::r150_ndt_localizer::PointsDownsamplerInfo_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::r150_ndt_localizer::PointsDownsamplerInfo_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.filter_name);
      stream.next(m.measurement_range);
      stream.next(m.original_points_size);
      stream.next(m.filtered_points_size);
      stream.next(m.original_ring_size);
      stream.next(m.filtered_ring_size);
      stream.next(m.exe_time);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PointsDownsamplerInfo_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::r150_ndt_localizer::PointsDownsamplerInfo_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::r150_ndt_localizer::PointsDownsamplerInfo_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "filter_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.filter_name);
    s << indent << "measurement_range: ";
    Printer<float>::stream(s, indent + "  ", v.measurement_range);
    s << indent << "original_points_size: ";
    Printer<int32_t>::stream(s, indent + "  ", v.original_points_size);
    s << indent << "filtered_points_size: ";
    Printer<int32_t>::stream(s, indent + "  ", v.filtered_points_size);
    s << indent << "original_ring_size: ";
    Printer<int32_t>::stream(s, indent + "  ", v.original_ring_size);
    s << indent << "filtered_ring_size: ";
    Printer<int32_t>::stream(s, indent + "  ", v.filtered_ring_size);
    s << indent << "exe_time: ";
    Printer<float>::stream(s, indent + "  ", v.exe_time);
  }
};

} // namespace message_operations
} // namespace ros

#endif // R150_NDT_LOCALIZER_MESSAGE_POINTSDOWNSAMPLERINFO_H
